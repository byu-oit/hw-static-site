name: CI

on:
  pull_request:
    branches: [ dev, master ]
    types: [ opened, reopened, synchronize, edited ]
env:
  node_version: '12.x'
  tf_version: '0.12.26'

jobs:

  env:
    name: Set Env Vars
    runs-on: ubuntu-latest
    steps:

    - name: Setup DEV Environment Variables
      if: github.base_ref == 'dev'
      run: |
        echo "::set-env name=aws_key_name::byu_oit_terraform_dev_key"
        echo "::set-env name=aws_secret_name::byu_oit_terraform_dev_secret"
        echo "::set-env name=tf_working_dir::./terraform-iac/dev/app"

    - name: Setup PRD Environment Variables
      if: github.base_ref == 'master'
      run: |
        echo "::set-env name=aws_key_name::byu_oit_terraform_prd_key"
        echo "::set-env name=aws_secret_name::byu_oit_terraform_prd_secret"
        echo "::set-env name=tf_working_dir::./terraform-iac/prd/app"

    outputs:
      aws_key_name: ${{ env.aws_key_name }}
      aws_secret_name: ${{ env.aws_secret_name }}
      tf_working_dir: ${{ env.tf_working_dir }} 

  test:
    name: NPM Test 
    runs-on: ubuntu-latest
    steps: 

    - uses: actions/checkout@v2

    - name: Setup Node.js
      uses: actions/setup-node@v1
      with:
        node-version: ${{ env.node_version }}

    - name: npm install 
      working-directory: src
      run: npm i 

    - name: npm test
      working-directory: src
      run: npm t 

  audit:
    name: NPM Audit 
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v2

    - name: Setup Node.js
      uses: actions/setup-node@v1
      with:
        node-version: ${{ env.node_version }}

    - name: npm audit
      working-directory: src
      run: npm audit --audit-level=critical

  lint:
    name: NPM Lint 
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v2

    - name: Setup Node.js
      uses: actions/setup-node@v1
      with:
        node-version: ${{ env.node_version }}

    - name: npm install 
      working-directory: src
      run: npm i 

    - name: npm lint
      working-directory: src
      run: npm run lint 

  docker:
    name: Docker Build 
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v2

    - name: docker build
      run: |
        docker build src --file src/Dockerfile

  format:
    name: Terraform Format
    runs-on: ubuntu-latest
    needs: env
    steps:

    - uses: actions/checkout@v2

    - name: Terraform Setup
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ env.tf_version }}

    - name: Terraform Format
      working-directory: ${{ needs.env.outputs.tf_working_dir }}
      run: terraform fmt -check

  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: env
    steps:

    - uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets[needs.env.outputs.aws_key_name] }}
        aws-secret-access-key: ${{ secrets[needs.env.outputs.aws_secret_name] }}
        aws-region: us-west-2

    - name: Build Test Lambda
      working-directory: tst/codedeploy-hooks/after-allow-test-traffic
      run: |
        npm install --production
        cp -R ../../../.postman .
        zip -r lambda.zip * .postman

    - name: Terraform Setup
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ env.tf_version }}

    - name: Terraform Init
      working-directory: ${{ needs.env.outputs.tf_working_dir }}
      run: terraform init

    - name: Terraform Plan
      working-directory: ${{ needs.env.outputs.tf_working_dir }}
      run: terraform plan -var 'image_tag=test' -input=false

    # TODO: Post plan back to PR
